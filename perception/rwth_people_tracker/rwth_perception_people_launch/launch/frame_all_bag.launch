<launch>
    <!-- Global parameters -->
    <!-- Nodes -->
    <arg name="mira_ros_adapter" default="false" />
    <arg name="kinect2_bridge" default="false" />
    <!-- VO -->
    <arg name="motion_parameters" default="/motion_matrix" />
    <arg name="sensor_frame_id" default="/hardware/depth/kinect2/ColorImageFrame" />
    <arg name="odom_frame_id" default="/robot/OdometryFrame" />
    <!-- GP -->
    <arg name="ground_plane" default="/ground_plane" />
    <arg name="rate" default="15.0"/>
    <arg name="base_footprint" default="/robot/BaseFrame" />
    <arg name="camera_frame" default="/hardware/depth/kinect2/ColorImageFrame" />
    <arg name="world_frame" default="/robot/OdometryFrame" />
    <!-- detectors -->
    <arg name="kinect" default="true" />
    <arg name="pano" default="true" />
    <arg name="camera_namespace" default="/hardware/depth/kinect2"/>
    <arg name="fused_detections" default="/yolofusion/detected_persons"/>
    <arg name="fused_detections_pano" default="/yolofusion/detected_persons_pano"/>
    <arg name="queue_size" default="10"/>
    <arg name="queue_size_small" default="10"/> <!-- for nodes with images -->
    <arg name="detection_id_offset" default="1"/>
    <arg name="detection_id_increment" default="1"/>
    <arg name="overlap_thresh_pano" default="0.7"/>
    <arg name="overlap_thresh_pano_kinect" default="0.3"/>
    <arg name="depth_scale" default="1.0"/>
    <arg name="image_kinect" default="/hardware/depth/kinect2/hd/image_color_rect" />
    <arg name="pano_image_left" default="/hardware/video/valeo/rectificationNIKRLeft/PanoramaImage" />
    <arg name="pano_image_right" default="/hardware/video/valeo/rectificationNIKRRight/PanoramaImage" />
    <arg name="pano_image_rear" default="/hardware/video/valeo/rectificationNIKRRear/PanoramaImage" />
    <arg name="fusion_rate" default="15" />
    <!-- general yolo-v3 arg -->
    <arg name="launch_prefix" default=""/>
    <arg name="yolo_weights_path" default="$(find darknet_ros)/yolo_network_config/weights"/>
    <arg name="yolo_config_path" default="$(find darknet_ros)/yolo_network_config/cfg"/>
    <arg name="yolo_version" default="v3"/>
    <arg name="bounding_boxes_yolo_kinect" default="/darknet_ros/bounding_boxes_kinect"/>
    <arg name="bounding_boxes_yolo_left" default="/darknet_ros/bounding_boxes_left"/>
    <arg name="bounding_boxes_yolo_right" default="/darknet_ros/bounding_boxes_right"/>
    <arg name="bounding_boxes_yolo_rear" default="/darknet_ros/bounding_boxes_rear"/>
    <!-- <arg name="bounding_boxes_yolo_kinect" default="/trt_yolo_boxes_kinect"/>
    <arg name="bounding_boxes_yolo_left" default="/trt_yolo_boxes_left"/>
    <arg name="bounding_boxes_yolo_right" default="/trt_yolo_boxes_right"/>
    <arg name="bounding_boxes_yolo_rear" default="/trt_yolo_boxes_rear"/>-->
    <arg name="world_scale" default="1.0"/>
    <arg name="detected_persons_yolo_kinect" default="/detected_persons/yolo_kinect"/>
    <arg name="detected_persons_yolo_left" default="/detected_persons/yolo_left"/>
    <arg name="detected_persons_yolo_right" default="/detected_persons/yolo_right"/>
    <arg name="detected_persons_yolo_rear" default="/detected_persons/yolo_rear"/>
    <arg name="yolo_pano_remote" default="false"/>
    <arg name="reid" default="true"/>
    <arg name="pose_variance" default="0.05"/>
    <!-- tracker -->
    <arg name="tracked_persons" default="/rwth_tracker/tracked_persons" />
    <!-- trajectories -->
    <arg name="person_trajectories" default="/rwth_tracker/person_trajectories" />
    <arg name="potential_helpers" default="/rwth_tracker/potential_helpers" />
    <arg name="selected_helper" default="/rwth_tracker/selected_helper" />
    <arg name="keep" default="true" />
    <arg name="strict" default="false" />
    <arg name="remember" default="true" />
    <arg name="helper_reid_thresh" default="50" /> <!-- set to 0 to disable -->

    <!-- /Global parameters -->

    <!-- MIRA-ROS-Adapter -->
    <include file="$(find mira_ros_adapter)/launch/mira_ros_adapter.launch" if="$(arg mira_ros_adapter)" />

    <!-- Visual Odometry -->
    <include file="$(find odometry_to_motion_matrix)/launch/tf2visual.launch">
        <arg name="motion_parameters" value="$(arg motion_parameters)" />
        <arg name="sensor_frame_id" value="$(arg sensor_frame_id)" />
        <arg name="odom_frame_id" value="$(arg odom_frame_id)" />
    </include>

    <!-- Ground Plane -->
    <include file="$(find rwth_ground_plane)/launch/ground_plane_tf_based_fixed.launch">
        <arg name="base_footprint" value="$(arg base_footprint)" />
        <arg name="camera_frame" value="$(arg world_frame)" />
        <arg name="ground_plane" value="$(arg ground_plane)" />
        <arg name="rate" value="$(arg rate)"/>
    </include>

    <!-- YOLO detector-->
    <!-- Load parameters for kinect -->
    <group if="$(arg kinect)">
        <rosparam command="load" ns="darknet_ros_kinect" file="$(find darknet_ros)/config/ros_kinect.yaml"/>
        <rosparam command="load" ns="darknet_ros_kinect" file="$(find darknet_ros)/config/yolo$(arg yolo_version).yaml"/>
        <node pkg="darknet_ros" type="darknet_ros" name="darknet_ros_kinect" output="screen" launch-prefix="$(arg launch_prefix)" respawn="true">
          <param name="weights_path"          value="$(arg yolo_weights_path)" />
          <param name="config_path"           value="$(arg yolo_config_path)" />
        </node>
    </group>
    <group if="$(arg pano)">
        <!-- Load parameters for left -->
        <rosparam command="load" ns="darknet_ros_left" file="$(find darknet_ros)/config/ros_pano_left.yaml"/>
        <rosparam command="load" ns="darknet_ros_left" file="$(find darknet_ros)/config/yolo$(arg yolo_version).yaml"/>
        <node pkg="darknet_ros" type="darknet_ros" name="darknet_ros_left" output="screen" launch-prefix="$(arg launch_prefix)">
          <param name="weights_path"          value="$(arg yolo_weights_path)" />
          <param name="config_path"           value="$(arg yolo_config_path)" />
        </node>
        <!-- Load parameters for right -->
        <rosparam command="load" ns="darknet_ros_right" file="$(find darknet_ros)/config/ros_pano_right.yaml"/>
        <rosparam command="load" ns="darknet_ros_right" file="$(find darknet_ros)/config/yolo$(arg yolo_version).yaml"/>
        <node pkg="darknet_ros" type="darknet_ros" name="darknet_ros_right" output="screen" launch-prefix="$(arg launch_prefix)">
          <param name="weights_path"          value="$(arg yolo_weights_path)" />
          <param name="config_path"           value="$(arg yolo_config_path)" />
        </node>
        <!-- Load parameters for rear -->
        <rosparam command="load" ns="darknet_ros_rear" file="$(find darknet_ros)/config/ros_pano_rear.yaml"/>
        <rosparam command="load" ns="darknet_ros_rear" file="$(find darknet_ros)/config/yolo$(arg yolo_version).yaml"/>
        <node pkg="darknet_ros" type="darknet_ros" name="darknet_ros_rear" output="screen" launch-prefix="$(arg launch_prefix)">
          <param name="weights_path"          value="$(arg yolo_weights_path)" />
          <param name="config_path"           value="$(arg yolo_config_path)" />
        </node>
    </group>

    <!-- YOLO convertor -->
    <!-- kinect -->
    <group if="$(arg kinect)">
        <node pkg="yoloconvertor" type="yoloconvertor_standard" name="yoloconvertor_kinect" output="screen">
            <param name="world_scale" value="$(arg world_scale)"/>
            <param name="ground_plane" value="$(arg ground_plane)" type="string"/>
            <param name="queue_size" value="$(arg queue_size_small)" type="int"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_kinect)" type="string"/>
            <param name="detection_id_offset" value="$(arg detection_id_offset)"/>
            <param name="detection_id_increment" value="$(arg detection_id_increment)"/>
            <param name="bounding_boxes" value="$(arg bounding_boxes_yolo_kinect)"/>
            <param name="camera_namespace" value="$(arg camera_namespace)" type="string"/>
            <param name="depth_scale" value="$(arg depth_scale)"/>
            <param name="pose_variance" value="$(arg pose_variance)"/>
        </node>
    </group>
    <group if="$(arg pano)">
        <!-- left -->
        <node pkg="yoloconvertor" type="yoloconvertor_panorama" name="yoloconvertor_pano_left" output="screen">
            <param name="world_scale" value="$(arg world_scale)"/>
            <param name="ground_plane" value="$(arg ground_plane)" type="string"/>
            <param name="queue_size" value="$(arg queue_size)" type="int"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_left)" type="string"/>
            <param name="detection_id_offset" value="$(arg detection_id_offset)"/>
            <param name="detection_id_increment" value="$(arg detection_id_increment)"/>
            <param name="bounding_boxes" value="$(arg bounding_boxes_yolo_left)"/>
            <param name="pose_variance" value="$(arg pose_variance)"/>
        </node>
        <!-- right -->
        <node pkg="yoloconvertor" type="yoloconvertor_panorama" name="yoloconvertor_pano_right" output="screen">
            <param name="world_scale" value="$(arg world_scale)"/>
            <param name="ground_plane" value="$(arg ground_plane)" type="string"/>
            <param name="queue_size" value="$(arg queue_size)" type="int"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_right)" type="string"/>
            <param name="detection_id_offset" value="$(arg detection_id_offset)"/>
            <param name="detection_id_increment" value="$(arg detection_id_increment)"/>
            <param name="bounding_boxes" value="$(arg bounding_boxes_yolo_right)"/>
            <param name="pose_variance" value="$(arg pose_variance)"/>
        </node>
        <!-- rear -->
        <node pkg="yoloconvertor" type="yoloconvertor_panorama" name="yoloconvertor_pano_rear" output="screen">
            <param name="world_scale" value="$(arg world_scale)"/>
            <param name="ground_plane" value="$(arg ground_plane)" type="string"/>
            <param name="queue_size" value="$(arg queue_size)" type="int"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_rear)" type="string"/>
            <param name="detection_id_offset" value="$(arg detection_id_offset)"/>
            <param name="detection_id_increment" value="$(arg detection_id_increment)"/>
            <param name="bounding_boxes" value="$(arg bounding_boxes_yolo_rear)"/>
            <param name="pose_variance" value="$(arg pose_variance)"/>
        </node>
    </group>

    <!-- ReID -->
    <group if="$(arg reid)">
        <node pkg="reid" type="reid_ros.py" name="reid_kinect" cwd="node" output="screen">
            <param name="image" value="$(arg image_kinect)" type="string"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_kinect)" type="string"/>
            <param name="queue_size" value="$(arg queue_size_small)" type="int"/>
            <param name="model_path" value="./model_v1.pth"/>
            <param name="embed_detectedpersons" value="$(arg detected_persons_yolo_kinect)_id" type="string"/>
        </node>

        <node pkg="reid" type="reid_ros.py" name="reid_pano_right" cwd="node" output="screen">
            <param name="image" value="$(arg pano_image_right)" type="string"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_right)" type="string"/>
            <param name="queue_size" value="$(arg queue_size_small)" type="int"/>
            <param name="model_path" value="./model_v1.pth"/>
            <param name="embed_detectedpersons" value="$(arg detected_persons_yolo_right)_id" type="string"/>
        </node>

        <node pkg="reid" type="reid_ros.py" name="reid_pano_left" cwd="node" output="screen">
            <param name="image" value="$(arg pano_image_left)" type="string"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_left)" type="string"/>
            <param name="queue_size" value="$(arg queue_size_small)" type="int"/>
            <param name="model_path" value="./model_v1.pth"/>
            <param name="embed_detectedpersons" value="$(arg detected_persons_yolo_left)_id" type="string"/>
        </node>

        <node pkg="reid" type="reid_ros.py" name="reid_pano_rear" cwd="node" output="screen">
            <param name="image" value="$(arg pano_image_rear)" type="string"/>
            <param name="detected_persons" value="$(arg detected_persons_yolo_rear)" type="string"/>
            <param name="queue_size" value="$(arg queue_size_small)" type="int"/>
            <param name="model_path" value="./model_v1.pth"/>
            <param name="embed_detectedpersons" value="$(arg detected_persons_yolo_rear)_id" type="string"/>
        </node>
    </group>

   <!-- Fusion -->
   <group if="$(arg pano)">
       <!-- run yolofusion pano-->
       <node pkg="yoloconvertor" type="yoloconvertor_fusion_async" name="yoloconvertor_fusion_pano" output="screen">
           <param name="queue_size" value="$(arg queue_size)" type="int"/>
           <param name="detection_id_offset" value="$(arg detection_id_offset)"/>
           <param name="detection_id_increment" value="$(arg detection_id_increment)"/>
           <param name="overlap_thresh" value="$(arg overlap_thresh_pano)"/>
           <param name="total_detected_persons" value="$(arg fused_detections_pano)" type="string"/>
           <param name="detected_persons_left" value="$(arg detected_persons_yolo_left)" unless="$(arg reid)" type="string"/>
           <param name="detected_persons_right" value="$(arg detected_persons_yolo_right)" unless="$(arg reid)" type="string"/>
           <param name="detected_persons_rear" value="$(arg detected_persons_yolo_rear)" unless="$(arg reid)" type="string"/>
           <param name="detected_persons_left" value="$(arg detected_persons_yolo_left)_id" if="$(arg reid)" type="string"/>
           <param name="detected_persons_right" value="$(arg detected_persons_yolo_right)_id" if="$(arg reid)" type="string"/>
           <param name="detected_persons_rear" value="$(arg detected_persons_yolo_rear)_id" if="$(arg reid)" type="string"/>
           <param name="world_frame" value="$(arg world_frame)" type="string" />
           <param name="fusion_rate" value="$(arg fusion_rate)" type="int" />
       </node>

       <group if="$(arg kinect)">
           <!-- run yolofusion pano+kinect-->
           <node pkg="yoloconvertor" type="yoloconvertor_fusion_async" name="yoloconvertor_fusion" output="screen">
               <param name="queue_size" value="$(arg queue_size)" type="int"/>
               <param name="detection_id_offset" value="$(arg detection_id_offset)"/>
               <param name="detection_id_increment" value="$(arg detection_id_increment)"/>
               <param name="overlap_thresh" value="$(arg overlap_thresh_pano_kinect)"/>
               <param name="total_detected_persons" value="$(arg fused_detections)" type="string"/>
               <param name="detected_persons_left" value="$(arg fused_detections_pano)" type="string" />
               <param name="detected_persons_right" value="$(arg fused_detections_pano)" type="string"/>
               <param name="detected_persons_rear" value="$(arg detected_persons_yolo_kinect)" unless="$(arg reid)" type="string"/>
               <param name="detected_persons_rear" value="$(arg detected_persons_yolo_kinect)_id" if="$(arg reid)" type="string"/>
               <param name="world_frame" value="$(arg world_frame)" type="string" />
               <param name="fusion_rate" value="$(arg fusion_rate)" type="int" />
           </node>
       </group>
       <group unless="$(arg kinect)">
           <!-- no kinect, just relay pano fusion-->
           <node name="relay_pano_fusion" pkg="topic_tools" type="relay" args="$(arg fused_detections_pano) $(arg fused_detections)" respawn="true" />
       </group>
   </group>
   <group unless="$(arg pano)">
        <group if="$(arg kinect)">
           <!-- run yolofusion (pseudo) kinect-->
           <node pkg="yoloconvertor" type="yoloconvertor_fusion_async" name="yoloconvertor_fusion" output="screen">
               <param name="queue_size" value="$(arg queue_size)" type="int"/>
               <param name="detection_id_offset" value="$(arg detection_id_offset)"/>
               <param name="detection_id_increment" value="$(arg detection_id_increment)"/>
               <param name="overlap_thresh" value="$(arg overlap_thresh_pano_kinect)"/>
               <param name="total_detected_persons" value="$(arg fused_detections)" type="string"/>
               <param name="detected_persons_left" value="$(arg detected_persons_yolo_kinect)" unless="$(arg reid)" type="string"/>
               <param name="detected_persons_left" value="$(arg detected_persons_yolo_kinect)_id" if="$(arg reid)" type="string"/>
               <param name="detected_persons_right" value="$(arg detected_persons_yolo_kinect)" unless="$(arg reid)" type="string"/>
               <param name="detected_persons_right" value="$(arg detected_persons_yolo_kinect)_id" if="$(arg reid)" type="string"/>
               <param name="detected_persons_rear" value="$(arg detected_persons_yolo_kinect)" unless="$(arg reid)" type="string"/>
               <param name="detected_persons_rear" value="$(arg detected_persons_yolo_kinect)_id" if="$(arg reid)" type="string"/>
               <param name="world_frame" value="$(arg world_frame)" type="string" />
               <param name="fusion_rate" value="$(arg fusion_rate)" type="int" />
           </node>
       </group>
       <group unless="$(arg kinect)">
           <!-- no kinect, no pano, no need to fuse-->
       </group>
   </group>

    <!-- Pedestrian Tracking -->
    <include file="$(find rwth_pedestrian_tracking)/launch/pedestrian_tracking.launch">
        <arg name="camera_namespace" value="$(arg camera_namespace)" />
        <arg name="ground_plane" value="$(arg ground_plane)" />
        <arg name="detections" value="$(arg fused_detections)" />
        <arg name="visual_odometry" value="$(arg motion_parameters)" />
        <arg name="pedestrian_array" value="/rwth_tracker/pedestrian_array" />
        <arg name="pedestrian_image" value="/rwth_tracker/image" />
        <arg name="tracked_persons" value="$(arg tracked_persons)" />
        <arg name="queue_size" value="$(arg queue_size)" />
    </include>

    <!-- Person Trajectories -->
    <include file="$(find rwth_pedestrian_trajectories)/launch/pedestrian_trajectories.launch">
        <arg name="tracked_persons" value="$(arg tracked_persons)" />
        <arg name="person_trajectories" value="$(arg person_trajectories)" />
        <arg name="potential_helpers" value="$(arg potential_helpers)" />
        <arg name="selected_helper" value="$(arg selected_helper)" />
        <arg name="queue_size" value="$(arg queue_size)" />
        <arg name="camera_frame" value="$(arg camera_frame)" />
        <arg name="keep" value="$(arg keep)" />
        <arg name="strict" value="$(arg strict)" />
        <arg name="remember" value="$(arg remember)" />
        <arg name="helper_reid_thresh" value="$(arg helper_reid_thresh)" />
    </include>

    <!-- kinect2_bridge -->
    <include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch" if="$(arg kinect2_bridge)" />

    <!-- adding rostopic tool relay -->
    <node name="topic_relay1" pkg="topic_tools" type="relay" args="/hardware/depth/kinect2/sync/SyncDepthImage /hardware/depth/kinect2/sd/image_depth" respawn="true" />
    <node name="topic_relay2" pkg="topic_tools" type="relay" args="/hardware/depth/kinect2/sync/SyncColorImage /hardware/depth/kinect2/hd/image_color_rect" respawn="true" />
    <node name="topic_relay3" pkg="topic_tools" type="relay" args="/hardware/depth/kinect2/ColorIntrinsic /hardware/depth/kinect2/hd/camera_info" respawn="true" />
    <node name="topic_relay4" pkg="topic_tools" type="relay" args="/hardware/depth/kinect2/DepthIntrinsic /hardware/depth/kinect2/sd/camera_info" respawn="true" />
    <node name="topic_relay5" pkg="topic_tools" type="relay" args="/hardware/depth/kinect2/sync/SyncRegisteredDepthImage /hardware/depth/kinect2/hd/image_depth_rect" respawn="true" />

    <!-- sim parameter -->
    <arg name="use_sim_time" default="true" />

</launch> 
